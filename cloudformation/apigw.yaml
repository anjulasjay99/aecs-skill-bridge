AWSTemplateFormatVersion: "2010-09-09"
Description: "SkillBridge - API Gateway (HTTP API + VPC Link + Domain) â€” Stack B"

Parameters:
    ProjectName:
        Type: String
        Default: skillbridge

    CustomDomainName:
        Type: String
        Description: "Custom domain for API, e.g., api.skillbridge.com"

    CertificateArn:
        Type: String
        Description: "ACM cert in same region for the CustomDomainName"

    EdgeNlbListenerArn:
        Type: String
        Description: "ARN of the NLB LISTENER (not NLB) created by edge-nginx Service. Format: arn:aws:elasticloadbalancing:region:account:listener/net/..."

    StageName:
        Type: String
        Default: prod

    HostedZoneId:
        Type: String
        Description: "Route53 Hosted Zone ID for the domain (e.g., Z1234567890ABC)"

Resources:
    # ---------------- HTTP API ----------------
    HttpApi:
        Type: AWS::ApiGatewayV2::Api
        Properties:
            Name: !Sub "${ProjectName}-http-api"
            ProtocolType: HTTP
            Description: "API Gateway for SkillBridge microservices"
            CorsConfiguration:
                AllowOrigins: ["*"]
                AllowMethods:
                    ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
                AllowHeaders: ["*"]
                MaxAge: 300

    # ---------------- VPC Link ----------------
    VpcLink:
        Type: AWS::ApiGatewayV2::VpcLink
        Properties:
            Name: !Sub "${ProjectName}-vpc-link"
            # For HTTP APIs with NLB, SubnetIds and SecurityGroupIds are not used
            # The link is established directly via the Listener ARN

    # ---------------- Integration ----------------
    Integration:
        Type: AWS::ApiGatewayV2::Integration
        Properties:
            ApiId: !Ref HttpApi
            Description: "Proxy all traffic to edge NGINX via NLB"
            IntegrationType: HTTP_PROXY
            IntegrationMethod: ANY
            PayloadFormatVersion: "1.0"
            ConnectionType: VPC_LINK
            ConnectionId: !Ref VpcLink
            IntegrationUri: !Ref EdgeNlbListenerArn
            TimeoutInMillis: 29000 # Max for HTTP API (29 seconds)
            # Pass all request parameters and headers
            RequestParameters:
                "overwrite:path": "$request.path"

    # ---------------- Routes ----------------
    # Root route
    RouteRoot:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref HttpApi
            RouteKey: "ANY /"
            Target: !Sub "integrations/${Integration}"

    # Catch-all proxy route
    RouteProxyAny:
        Type: AWS::ApiGatewayV2::Route
        Properties:
            ApiId: !Ref HttpApi
            RouteKey: "ANY /{proxy+}"
            Target: !Sub "integrations/${Integration}"

    # ---------------- Deployment & Stage ----------------
    Deployment:
        Type: AWS::ApiGatewayV2::Deployment
        DependsOn:
            - RouteRoot
            - RouteProxyAny
        Properties:
            ApiId: !Ref HttpApi
            Description: !Sub "Deployment for ${StageName} stage"

    Stage:
        Type: AWS::ApiGatewayV2::Stage
        Properties:
            ApiId: !Ref HttpApi
            StageName: !Ref StageName
            DeploymentId: !Ref Deployment
            Description: !Sub "${StageName} stage"
            AutoDeploy: false
            DefaultRouteSettings:
                ThrottlingBurstLimit: 5000
                ThrottlingRateLimit: 2000
            AccessLogSettings:
                DestinationArn: !GetAtt ApiLogGroup.Arn
                Format: "$context.requestId $context.error.message $context.error.messageString"

    # ---------------- CloudWatch Logs ----------------
    ApiLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub "/aws/apigateway/${ProjectName}-http-api"
            RetentionInDays: 7

    # ---------------- Custom Domain ----------------
    ApiDomainName:
        Type: AWS::ApiGatewayV2::DomainName
        Properties:
            DomainName: !Ref CustomDomainName
            DomainNameConfigurations:
                - CertificateArn: !Ref CertificateArn
                  EndpointType: REGIONAL
                  SecurityPolicy: TLS_1_2

    ApiMapping:
        Type: AWS::ApiGatewayV2::ApiMapping
        Properties:
            ApiId: !Ref HttpApi
            DomainName: !Ref ApiDomainName
            Stage: !Ref Stage

    # ---------------- Route53 DNS Record ----------------
    DnsRecord:
        Type: AWS::Route53::RecordSet
        Properties:
            HostedZoneId: !Ref HostedZoneId
            Name: !Ref CustomDomainName
            Type: A
            AliasTarget:
                DNSName: !GetAtt ApiDomainName.RegionalDomainName
                HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId
                EvaluateTargetHealth: false

Outputs:
    ApiInvokeUrl:
        Description: "Custom domain URL for API"
        Value: !Sub "https://${CustomDomainName}"
        Export:
            Name: !Sub "${AWS::StackName}:ApiUrl"

    ApiDefaultUrl:
        Description: "Default API Gateway URL (without custom domain)"
        Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"

    ApiId:
        Description: "HTTP API ID"
        Value: !Ref HttpApi
        Export:
            Name: !Sub "${AWS::StackName}:ApiId"

    VpcLinkId:
        Description: "VPC Link ID"
        Value: !Ref VpcLink
        Export:
            Name: !Sub "${AWS::StackName}:VpcLinkId"

    StageName:
        Description: "API Stage Name"
        Value: !Ref StageName
