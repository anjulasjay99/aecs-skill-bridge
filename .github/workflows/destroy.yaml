name: 🧹 Destroy SkillBridge (EKS + API Gateway)

on:
    push:
        branches: [destroy]

env:
    AWS_REGION: ap-southeast-1
    STACK_NAME: skillbridge-stack

jobs:
    destroy:
        runs-on: ubuntu-latest
        steps:
            - name: 🧾 Checkout Repository
              uses: actions/checkout@v4

            - name: ⚙️ Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: 🔍 Identify Cluster and Configure kubectl (best-effort)
              continue-on-error: true
              run: |
                  echo "🔎 Checking for existing EKS cluster in stack: $STACK_NAME ..."
                  CLUSTER=$(aws cloudformation describe-stacks --stack-name $STACK_NAME \
                    --query "Stacks[0].Outputs[?OutputKey=='ClusterName'].OutputValue" --output text 2>/dev/null || true)
                  if [ -n "$CLUSTER" ]; then
                    echo "✅ Found cluster: $CLUSTER"
                    aws eks update-kubeconfig --name $CLUSTER --region $AWS_REGION || true
                  else
                    echo "⚠️ No EKS cluster output found in stack $STACK_NAME"
                  fi

            - name: 🧨 Delete Kubernetes Resources
              continue-on-error: true
              run: |
                  echo "🧨 Deleting Kubernetes resources if they exist..."
                  cd $GITHUB_WORKSPACE
                  if [ -d "k8s" ]; then
                    kubectl delete -f k8s/edge-nginx-deployment.yaml --ignore-not-found || echo "⚠️ Missing edge-nginx-deployment.yaml"
                    kubectl delete -f k8s/edge-nginx-configmap.yaml --ignore-not-found || echo "⚠️ Missing edge-nginx-configmap.yaml"
                    if [ -f k8s/services-deployments.yaml ]; then
                      sed "s|\${AWS_ACCOUNT_ID}|${{ secrets.AWS_ACCOUNT_ID }}|g" k8s/services-deployments.yaml | kubectl delete -f - --ignore-not-found
                    fi
                    kubectl delete -f k8s/namespace.yaml --ignore-not-found || true
                  else
                    echo "⚠️ No k8s/ directory found. Skipping Kubernetes cleanup."
                  fi
                  echo "✅ K8s cleanup attempted (ignored missing resources)."

            - name: 🌐 Delete API Gateway Stack
              continue-on-error: true
              run: |
                  echo "🌐 Checking for API Gateway stack..."
                  aws cloudformation describe-stacks --stack-name ${STACK_NAME}-apigw --region $AWS_REGION >/dev/null 2>&1
                  if [ $? -eq 0 ]; then
                    echo "🗑️ Deleting API Gateway stack: ${STACK_NAME}-apigw"
                    aws cloudformation delete-stack --stack-name ${STACK_NAME}-apigw
                    echo "⏳ Waiting for ${STACK_NAME}-apigw deletion to complete..."
                    aws cloudformation wait stack-delete-complete --stack-name ${STACK_NAME}-apigw --region $AWS_REGION || true
                    echo "✅ API Gateway stack deletion finished."
                  else
                    echo "⚠️ API Gateway stack not found. Skipping."
                  fi

            - name: 🧽 Clean Up Public IPs Before IGW Detach
              continue-on-error: true
              run: |
                  echo "🧽 Cleaning up public IP dependencies for SkillBridge VPC..."
                  VPC_ID=$(aws ec2 describe-vpcs \
                    --filters Name=tag:Name,Values=SkillBridgeVPC \
                    --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION || echo "None")

                  if [ "$VPC_ID" = "None" ]; then
                    echo "⚠️ No SkillBridgeVPC found. Skipping."
                    exit 0
                  fi

                  # Delete NAT Gateways
                  NAT_IDS=$(aws ec2 describe-nat-gateways \
                    --filter Name=vpc-id,Values=$VPC_ID \
                    --query "NatGateways[].NatGatewayId" --output text --region $AWS_REGION || echo "")
                  for NAT in $NAT_IDS; do
                    echo "🗑️ Deleting NAT Gateway: $NAT"
                    aws ec2 delete-nat-gateway --nat-gateway-id $NAT --region $AWS_REGION || true
                  done

                  # Wait for NAT deletion
                  echo "⏳ Waiting for NAT gateways to be deleted..."
                  sleep 30

                  # Release Elastic IPs
                  ALLOC_IDS=$(aws ec2 describe-addresses \
                    --filters Name=domain,Values=vpc \
                    --query "Addresses[].AllocationId" --output text --region $AWS_REGION || echo "")
                  for AID in $ALLOC_IDS; do
                    echo "🪓 Releasing Elastic IP: $AID"
                    aws ec2 release-address --allocation-id $AID --region $AWS_REGION || true
                  done

                  # Delete ENIs with public IPs
                  ENI_IDS=$(aws ec2 describe-network-interfaces \
                    --filters Name=vpc-id,Values=$VPC_ID \
                    --query "NetworkInterfaces[?Association.PublicIp!=null].NetworkInterfaceId" --output text --region $AWS_REGION || echo "")
                  for ENI in $ENI_IDS; do
                    echo "🧹 Deleting ENI with public IP: $ENI"
                    aws ec2 delete-network-interface --network-interface-id $ENI --region $AWS_REGION || true
                  done

                  echo "✅ Public IP cleanup complete. IGW should now be safe to detach."

            # - name: 🪓 Pre-detach Internet Gateway (prevent NotStabilized)
            #   continue-on-error: true
            #   run: |
            #       echo "🧭 Searching for Internet Gateway attached to SkillBridge VPC..."
            #       IGW_ID=$(aws ec2 describe-internet-gateways \
            #         --filters Name=tag:Name,Values=SkillBridgeIGW \
            #         --query 'InternetGateways[0].InternetGatewayId' --output text --region $AWS_REGION || echo "None")
            #       VPC_ID=$(aws ec2 describe-vpcs \
            #         --filters Name=tag:Name,Values=SkillBridgeVPC \
            #         --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION || echo "None")

            #       if [ "$IGW_ID" != "None" ] && [ "$VPC_ID" != "None" ]; then
            #         echo "🪓 Detaching IGW ($IGW_ID) from VPC ($VPC_ID)..."
            #         aws ec2 detach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID" --region $AWS_REGION || true
            #         sleep 10
            #         echo "✅ Detachment command issued successfully."
            #       else
            #         echo "⚠️ IGW or VPC not found — nothing to detach."
            #       fi

            - name: 🪓 Pre-detach Internet Gateway and Clean Network (prevent NotStabilized)
              continue-on-error: true
              run: |
                  echo "🧭 Searching for SkillBridge networking resources..."

                  VPC_ID=$(aws ec2 describe-vpcs \
                    --filters Name=tag:Name,Values=SkillBridgeVPC \
                    --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION || echo "None")

                  if [ "$VPC_ID" = "None" ]; then
                    echo "⚠️ No SkillBridgeVPC found. Skipping."
                    exit 0
                  fi

                  echo "✅ Found VPC: $VPC_ID"

                  # ─────────────────────────────────────────────
                  # 1️⃣ Detach and delete Internet Gateway
                  # ─────────────────────────────────────────────
                  IGW_ID=$(aws ec2 describe-internet-gateways \
                    --filters Name=attachment.vpc-id,Values=$VPC_ID \
                    --query 'InternetGateways[0].InternetGatewayId' --output text --region $AWS_REGION || echo "None")
                  if [ "$IGW_ID" != "None" ]; then
                    echo "🪓 Detaching Internet Gateway: $IGW_ID"
                    aws ec2 detach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID" --region $AWS_REGION || true
                    sleep 5
                    echo "🗑️ Deleting Internet Gateway: $IGW_ID"
                    aws ec2 delete-internet-gateway --internet-gateway-id "$IGW_ID" --region $AWS_REGION || true
                  fi

                  # ─────────────────────────────────────────────
                  # 2️⃣ Delete NAT Gateways (if any remain)
                  # ─────────────────────────────────────────────
                  NAT_IDS=$(aws ec2 describe-nat-gateways \
                    --filter Name=vpc-id,Values=$VPC_ID \
                    --query "NatGateways[].NatGatewayId" --output text --region $AWS_REGION || echo "")
                  for NAT in $NAT_IDS; do
                    echo "🗑️ Deleting NAT Gateway: $NAT"
                    aws ec2 delete-nat-gateway --nat-gateway-id $NAT --region $AWS_REGION || true
                  done
                  sleep 30

                  # ─────────────────────────────────────────────
                  # 3️⃣ Delete Elastic IPs (to avoid dependency errors)
                  # ─────────────────────────────────────────────
                  ALLOC_IDS=$(aws ec2 describe-addresses \
                    --filters Name=domain,Values=vpc \
                    --query "Addresses[].AllocationId" --output text --region $AWS_REGION || echo "")
                  for AID in $ALLOC_IDS; do
                    echo "🪓 Releasing Elastic IP: $AID"
                    aws ec2 release-address --allocation-id $AID --region $AWS_REGION || true
                  done

                  # ─────────────────────────────────────────────
                  # 4️⃣ Delete non-main route tables
                  # ─────────────────────────────────────────────
                  RTB_IDS=$(aws ec2 describe-route-tables \
                    --filters Name=vpc-id,Values=$VPC_ID \
                    --query 'RouteTables[].RouteTableId' --output text --region $AWS_REGION || echo "")
                  for RTB in $RTB_IDS; do
                    MAIN=$(aws ec2 describe-route-tables \
                      --route-table-ids $RTB \
                      --query 'RouteTables[0].Associations[?Main==`true`]' --output text --region $AWS_REGION || echo "")
                    if [ -z "$MAIN" ]; then
                      echo "🗑️ Deleting route table: $RTB"
                      aws ec2 delete-route-table --route-table-id $RTB --region $AWS_REGION || true
                    fi
                  done

                  # ─────────────────────────────────────────────
                  # 5️⃣ Delete subnets
                  # ─────────────────────────────────────────────
                  SUBNET_IDS=$(aws ec2 describe-subnets \
                    --filters Name=vpc-id,Values=$VPC_ID \
                    --query 'Subnets[].SubnetId' --output text --region $AWS_REGION || echo "")
                  for SUBNET in $SUBNET_IDS; do
                    echo "🗑️ Deleting subnet: $SUBNET"
                    aws ec2 delete-subnet --subnet-id $SUBNET --region $AWS_REGION || true
                  done

                  # ─────────────────────────────────────────────
                  # 6️⃣ Delete non-default security groups
                  # ─────────────────────────────────────────────
                  SG_IDS=$(aws ec2 describe-security-groups \
                    --filters Name=vpc-id,Values=$VPC_ID \
                    --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text --region $AWS_REGION || echo "")
                  for SG in $SG_IDS; do
                    echo "🗑️ Deleting security group: $SG"
                    aws ec2 delete-security-group --group-id $SG --region $AWS_REGION || true
                  done

                  # ─────────────────────────────────────────────
                  # 7️⃣ Delete orphan ENIs
                  # ─────────────────────────────────────────────
                  ENI_IDS=$(aws ec2 describe-network-interfaces \
                    --filters Name=vpc-id,Values=$VPC_ID \
                    --query 'NetworkInterfaces[].NetworkInterfaceId' --output text --region $AWS_REGION || echo "")
                  for ENI in $ENI_IDS; do
                    echo "🧹 Deleting ENI: $ENI"
                    aws ec2 delete-network-interface --network-interface-id $ENI --region $AWS_REGION || true
                  done

                  # ─────────────────────────────────────────────
                  # 8️⃣ Finally delete the VPC
                  # ─────────────────────────────────────────────
                  echo "🗑️ Deleting VPC: $VPC_ID"
                  aws ec2 delete-vpc --vpc-id $VPC_ID --region $AWS_REGION || true

                  echo "✅ Network cleanup complete. Safe to delete CloudFormation stack."

            - name: 🧱 Delete Core CloudFormation Stack
              run: |
                  echo "🧱 Checking for core stack: $STACK_NAME"
                  EXISTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_REGION --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NONE")
                  if [[ "$EXISTS" != "NONE" ]]; then
                    echo "🗑️ Deleting CloudFormation stack: $STACK_NAME"
                    aws cloudformation delete-stack --stack-name $STACK_NAME --region $AWS_REGION
                    echo "⏳ Waiting for $STACK_NAME deletion to complete..."
                    aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --region $AWS_REGION || true

                    STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_REGION --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DELETE_COMPLETE")

                    if [[ "$STATUS" == "DELETE_FAILED" ]]; then
                      echo "❌ Stack deletion failed. Printing recent failure reasons:"
                      aws cloudformation describe-stack-events \
                        --stack-name $STACK_NAME --region $AWS_REGION \
                        --query "StackEvents[?ResourceStatus=='DELETE_FAILED'].[LogicalResourceId,ResourceType,ResourceStatusReason]" \
                        --output table || true

                      echo "🧹 Attempting to force delete stuck resources (like IGW or ENIs)..."
                      # Try IGW detach again if needed
                      IGW_ID=$(aws ec2 describe-internet-gateways --filters Name=tag:Name,Values=SkillBridgeIGW --query 'InternetGateways[0].InternetGatewayId' --output text --region $AWS_REGION || echo "None")
                      VPC_ID=$(aws ec2 describe-vpcs --filters Name=tag:Name,Values=SkillBridgeVPC --query 'Vpcs[0].VpcId' --output text --region $AWS_REGION || echo "None")
                      if [ "$IGW_ID" != "None" ] && [ "$VPC_ID" != "None" ]; then
                        echo "🪓 Retrying IGW detach for $IGW_ID ..."
                        aws ec2 detach-internet-gateway --internet-gateway-id "$IGW_ID" --vpc-id "$VPC_ID" --region $AWS_REGION || true
                      fi
                      
                      # Retry delete once more
                      echo "🔁 Retrying CloudFormation deletion..."
                      aws cloudformation delete-stack --stack-name $STACK_NAME --region $AWS_REGION || true
                      aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME --region $AWS_REGION || true
                      echo "✅ Retry attempt finished."
                    else
                      echo "✅ Core stack deletion completed successfully."
                    fi
                  else
                    echo "⚠️ Core stack not found. Skipping."
                  fi

            - name: 🧺 Clean Up ECR Repositories
              continue-on-error: true
              run: |
                  echo "🧺 Cleaning up leftover ECR repositories..."
                  for repo in user-service booking-service availability-service search-service; do
                    echo "→ Checking for repository: $repo"
                    aws ecr describe-repositories --repository-names "$repo" --region $AWS_REGION >/dev/null 2>&1
                    if [ $? -eq 0 ]; then
                      echo "🗑️ Deleting ECR repository: $repo"
                      aws ecr delete-repository --repository-name "$repo" --region $AWS_REGION --force || true
                    else
                      echo "⚠️ Repository $repo not found."
                    fi
                  done
                  echo "✅ ECR cleanup completed."

            - name: 🔎 Verify Remaining Resources
              run: |
                  echo "🔍 Listing remaining stacks (should be empty for SkillBridge):"
                  aws cloudformation list-stacks --region $AWS_REGION \
                    --query "StackSummaries[?StackName=='${STACK_NAME}' && StackStatus!='DELETE_COMPLETE'].[StackName,StackStatus]" --output table || true
                  echo ""
                  echo "🔍 Checking for leftover EKS clusters:"
                  aws eks list-clusters --region $AWS_REGION --output table || true
                  echo ""
                  echo "🔍 Checking for leftover ECR repositories:"
                  aws ecr describe-repositories --region $AWS_REGION --query "repositories[].repositoryName" --output table || true
                  echo ""
                  echo "🔍 Checking for leftover VPCs tagged SkillBridgeVPC:"
                  aws ec2 describe-vpcs --filters Name=tag:Name,Values=SkillBridgeVPC --region $AWS_REGION --query 'Vpcs[].VpcId' --output table || true

            - name: ✅ Final Status
              run: |
                  echo "🎉 All SkillBridge infrastructure cleanup steps completed."
                  echo "💡 Verification summary above confirms whether anything remains."
                  echo "🚀 Safe to re-run deployment anytime."
